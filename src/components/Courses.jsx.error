import React, { useState } from 'react';
import { 
  Calendar, 
  Users, 
  Clock, 
  MapPin, 
  Tag, 
  Plus, 
  Trash2, 
  Edit, 
  Save, 
  X,
  AlertTriangle,
  UserCheck
} from 'lucide-react';

export default function Courses({ 
  courses, 
  setCourses, 
  trainers, 
  deleteMode, 
  adminMode 
}) {
  const [editingCourse, setEditingCourse] = useState(null);
  const [newCourse, setNewCourse] = useState({
    name: '',
    dayOfWeek: '',
    startTime: '',
    endTime: '',
    location: '',
    category: '',
    assignedTrainerIds: [],
    requiredTrainers: 2
  });

  const daysOfWeek = [
    'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 
    'Freitag', 'Samstag', 'Sonntag'
  ];

  const categories = [
    'Kinderturnen', 'Fitness', 'Seniorensport', 
    'Ballsport', 'Gymnastik', 'Sonstiges'
  ];

  const addCourse = () => {
    if (newCourse.name && newCourse.dayOfWeek && newCourse.startTime) {
      const course = {
        ...newCourse,
        id: Date.now(),
        requiredTrainers: parseInt(newCourse.requiredTrainers) || 2
      };
      setCourses([...courses, course]);
      setNewCourse({
        name: '',
        dayOfWeek: '',
        startTime: '',
        endTime: '',
        location: '',
        category: '',
        assignedTrainerIds: [],
        requiredTrainers: 2
      });
    }
  };

  const deleteCourse = (id) => {
    setCourses(courses.filter(c => c.id !== id));
  };

  const startEdit = (course) => {
    setEditingCourse({
      ...course,
      requiredTrainers: course.requiredTrainers || 2
    });
  };

  const saveEdit = () => {
    setCourses(courses.map(c => 
      c.id === editingCourse.id 
        ? {
            ...editingCourse,
            requiredTrainers: parseInt(editingCourse.requiredTrainers) || 2
          }
        : c
    ));
    setEditingCourse(null);
  };

  const cancelEdit = () => {
    setEditingCourse(null);
  };

  const toggleTrainerAssignment = (courseId, trainerId) => {
    setCourses(courses.map(course => {
      if (course.id === courseId) {
        const currentIds = course.assignedTrainerIds || [];
        const newIds = currentIds.includes(trainerId)
          ? currentIds.filter(id => id !== trainerId)
          : [...currentIds, trainerId];
        return { ...course, assignedTrainerIds: newIds };
      }
      return course;
    }));
  };

  const getStaffingStatus = (course) => {
    const assigned = course.assignedTrainerIds?.length || 0;
    const required = course.requiredTrainers || 2;
    
    if (assigned === 0) return { status: 'critical', color: 'red' };
    if (assigned < required) return { status: 'warning', color: 'yellow' };
    if (assigned === required) return { status: 'optimal', color: 'green' };
    return { status: 'overstaffed', color: 'blue' };
  };

  const getStaffingBadge = (course) => {
    const assigned = course.assignedTrainerIds?.length || 0;
    const required = course.requiredTrainers || 2;
    const { color } = getStaffingStatus(course);
    
    return (
      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium
        ${color === 'red' ? 'bg-red-100 text-red-800' : ''}
        ${color === 'yellow' ? 'bg-yellow-100 text-yellow-800' : ''}
        ${color === 'green' ? 'bg-green-100 text-green-800' : ''}
        ${color === 'blue' ? 'bg-blue-100 text-blue-800' : ''}
      `}>
        <Users className="w-3 h-3 mr-1" />
        {assigned} / {required}
      </span>
    );
  };

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-xl font-semibold mb-4">Kurs hinzufÃ¼gen</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <input
  type="checkbox"
  className="mr-2"
  checked={course.assignedTrainerIds?.includes(trainer.id) || false}
  onChange={() => toggleTrainerAssignment(course.id, trainer.id)}
  disabled={!canAssignTrainers}
/>
                        <span>{trainer.firstName} {trainer.lastName}</span>
                      </label>
                    ))}
                  </div>
                </div>
              </>
            )}
          </div>
        ))}
      </div>

      {courses.length === 0 && (
        <div className="bg-gray-50 rounded-lg p-8 text-center text-gray-500">
          Noch keine Kurse angelegt. FÃ¼gen Sie oben Ihren ersten Kurs hinzu!
        </div>
      )}
    </div>
  );
}

