name: Deploy TSV Rot Trainer to Azure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install and Build
      run: |
        npm ci
        npm run build

    - name: Prepare deployment files
      run: |
        cat > server.js << 'EOF'
        const express = require('express');
        const path = require('path');
        const app = express();
        
        // MIME-Types explizit setzen
        express.static.mime.define({
          'application/javascript': ['js'],
          'text/css': ['css'],
          'image/svg+xml': ['svg']
        });
        
        // Static files mit korrekten Headers
        app.use(express.static('dist', {
          setHeaders: (res, filePath) => {
            if (filePath.endsWith('.js')) {
              res.setHeader('Content-Type', 'application/javascript');
            } else if (filePath.endsWith('.css')) {
              res.setHeader('Content-Type', 'text/css');
            }
          }
        }));
        
        // SPA Fallback
        app.get('*', (req, res) => {
          res.sendFile(path.join(__dirname, 'dist', 'index.html'));
        });
        
        const PORT = process.env.PORT || 8181;
        app.listen(PORT, () => console.log(`Server on ${PORT}`));
        EOF
        
        cat > package.json << 'EOF'
        {
          "name": "tsvrot-trainer",
          "version": "1.0.0",
          "scripts": {
            "start": "node server.js"
          },
          "dependencies": {
            "express": "^4.18.2"
          }
        }
        EOF
        
        npm install express --production

    - name: Deploy to Azure
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'tsvrot-trainer-2025'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: .
